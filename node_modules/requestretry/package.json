{
  "_args": [
    [
      "requestretry@https://registry.npmjs.org/requestretry/-/requestretry-1.6.0.tgz",
      "/home/simon/LMS/masterlms/LMS"
    ]
  ],
  "_from": "requestretry@>=1.2.2 <2.0.0",
  "_id": "requestretry@1.6.0",
  "_inCache": true,
  "_location": "/requestretry",
  "_phantomChildren": {
    "aws-sign2": "0.6.0",
    "aws4": "1.3.2",
    "bl": "1.0.3",
    "caseless": "0.11.0",
    "combined-stream": "1.0.5",
    "extend": "3.0.0",
    "forever-agent": "0.6.1",
    "form-data": "1.0.0-rc4",
    "har-validator": "2.0.6",
    "hawk": "3.1.3",
    "http-signature": "1.1.1",
    "is-typedarray": "1.0.0",
    "isstream": "0.1.2",
    "json-stringify-safe": "5.0.1",
    "mime-db": "1.22.0",
    "node-uuid": "1.4.7",
    "oauth-sign": "0.8.1",
    "stringstream": "0.0.5",
    "tough-cookie": "2.2.2",
    "tunnel-agent": "0.4.2"
  },
  "_requested": {
    "name": "requestretry",
    "raw": "requestretry@https://registry.npmjs.org/requestretry/-/requestretry-1.6.0.tgz",
    "rawSpec": "https://registry.npmjs.org/requestretry/-/requestretry-1.6.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/requestretry/-/requestretry-1.6.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/slack-node"
  ],
  "_resolved": "https://registry.npmjs.org/requestretry/-/requestretry-1.6.0.tgz",
  "_shasum": "3b33a9389bf17f87a9ad39862b47ffd04172e286",
  "_shrinkwrap": null,
  "_spec": "requestretry@https://registry.npmjs.org/requestretry/-/requestretry-1.6.0.tgz",
  "_where": "/home/simon/LMS/masterlms/LMS",
  "author": {
    "email": "npm@fgribreau.com",
    "name": "Francois-Guillaume Ribreau",
    "url": "http://fgribreau.com"
  },
  "bugs": {
    "url": "https://github.com/FGRibreau/node-request-retry/issues"
  },
  "contributors": [
    {
      "email": "dev@juliencrestin.com",
      "name": "juliendangers"
    }
  ],
  "dependencies": {
    "fg-lodash": "0.0.2",
    "request": "^2.62.x",
    "when": "~3.7.5"
  },
  "description": "request-retry wrap nodejs request to retry http(s) requests in case of error",
  "devDependencies": {
    "bluebird": "~3.0.5",
    "chai": "^3.2.0",
    "kew": "~0.7.0",
    "mocha": "^2.3.0",
    "nock": "~3.1.0",
    "q": "~1.4.1",
    "rsvp": "~3.1.0"
  },
  "homepage": "https://github.com/FGRibreau/node-request-retry#readme",
  "license": "MIT",
  "main": "index.js",
  "name": "requestretry",
  "optionalDependencies": {},
  "readme": "# Request-retry [![Deps](https://david-dm.org/FGRibreau/node-request-retry.png)](https://david-dm.org/FGRibreau/node-request-retry) [![Build Status](https://drone.io/github.com/FGRibreau/node-request-retry/status.png)](https://drone.io/github.com/FGRibreau/node-request-retry/latest) [![Downloads](http://img.shields.io/npm/dm/requestretry.svg)](https://www.npmjs.com/package/requestretry)\n\n![NPM](https://nodei.co/npm/requestretry.png?downloadRank=true) ![NPM](https://nodei.co/npm-dl/requestretry.png?months=3&height=2)\n\nWhen the connection fails with one of `ECONNRESET`, `ENOTFOUND`, `ESOCKETTIMEDOUT`, `ETIMEDOUT`, `ECONNREFUSED`, `EHOSTUNREACH`, `EPIPE`, `EAI_AGAIN` or when an HTTP 5xx error occurrs, the request will automatically be re-attempted as these are often recoverable errors and will go away on retry.\n\n## Usage\n\nRequest-retry is a drop-in replacement for [request](https://github.com/mikeal/request) but adds two new options `maxAttempts` and `retryDelay`. It also adds one property to the response, `attempts`. It supports callbacks or promises.\n\n### With callbacks\n\n```javascript\nvar request = require('requestretry');\n\nrequest({\n  url: 'https://api.domain.com/v1/a/b'\n  json:true,\n\n  // The below parameters are specific to request-retry\n  maxAttempts: 5,   // (default) try 5 times\n  retryDelay: 5000,  // (default) wait for 5s before trying again\n  retryStrategy: request.RetryStrategies.HTTPOrNetworkError // (default) retry on 5xx or network errors\n}, function(err, response, body){\n  // this callback will only be called when the request succeeded or after maxAttempts or on error\n  if (response) {\n    console.log('The number of request attempts: ' + response.attempts);\n  }\n});\n```\n\n### With promises\n\nWhen you're using promises, you can pass the two following options:\n- `fullResponse` _(default true)_ - To resolve the promise with the full response or just the body\n- `promiseFactory` _(default bluebird)_ - A function to allow the usage of a different promise implementation library\n\n```javascript\nrequest({\n  url: 'https://api.domain.com/v1/a/b'\n  json:true,\n\n  fullResponse: true // (default) To resolve the promise with the full response or just the body\n})\n.then(function (response) {\n  // response = The full response object or just the body\n})\n.catch(function(error) {\n  // error = Any occurred error\n})\n```\n\n**Using `promiseFactory` option to use a different promise implementation library**\n\n```javascript\n// See the tests for different libraries usage examples\n\n/**\n * @param  {Function} resolver The promise resolver function\n * @return {Object} The promise instance\n */\nfunction customPromiseFactory(resolver) {\n  // With when.js\n  return require('when').promise(resolver);\n\n  // With RSVP.js\n  var Promise = require('rsvp').Promise;\n\n  return new Promise(resolver);\n}\n\nrequest({\n  url: 'https://api.domain.com/v1/a/b'\n  json:true,\n\n  // Custom promise factory function\n  promiseFactory: customPromiseFactory\n})\n.then(function (response) {\n  // response = The full response object or just the body\n})\n.catch(function(error) {\n  // error = Any occurred error\n})\n```\n\n## Installation\n\nInstall with [npm](https://npmjs.org/package/requestretry).\n\n    npm install --save requestretry\n\n## How to define your own retry strategy\n\n```\n/**\n * @param  {Null | Object} err\n * @param  {Object} response\n * @return {Boolean} true if the request should be retried\n */\nfunction myRetryStrategy(err, response){\n  // retry the request if we had an error or if the response was a 'Bad Gateway'\n  return err ||Â response.statusCode === 502;\n}\n\nrequest({\n  url: 'https://api.domain.com/v1/a/b'\n  json:true,\n  retryStrategy: myRetryStrategy\n}, function(err, response, body){\n  // this callback will only be called when the request succeeded or after maxAttempts or on error\n});\n```\n\n## Modifying `request` options\nYou can access request's `defaults` method like so:\n\n```js\nvar request = require('requestretry').request.defaults({my: options});\n```\n\n## [Changelog](CHANGELOG.md)\n\nCopyright 2014, [Francois-Guillaume Ribreau](http://fgribreau.com) (npm@fgribreau.com)\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git+https://github.com/FGRibreau/node-request-retry.git"
  },
  "scripts": {
    "test": "mocha test"
  },
  "version": "1.6.0"
}
